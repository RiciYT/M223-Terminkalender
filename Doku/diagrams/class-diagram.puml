@startuml
title UML-Klassendiagramm - M223 Terminkalender

package "com.example.reservations.model" {
    class Reservation {
        - id: Long
        - title: String
        - location: String
        - roomNumber: Integer
        - description: String
        - startTime: LocalDateTime
        - endTime: LocalDateTime
        - accessType: ReservationAccess
        - accessCode: String
        - publicKey: String
        - privateKey: String
        - participants: List<Participant>
        --
        + getId(): Long
        + getTitle(): String
        + setTitle(String): void
        + getLocation(): String
        + setLocation(String): void
        + getRoomNumber(): Integer
        + setRoomNumber(Integer): void
        + getDescription(): String
        + setDescription(String): void
        + getStartTime(): LocalDateTime
        + setStartTime(LocalDateTime): void
        + getEndTime(): LocalDateTime
        + setEndTime(LocalDateTime): void
        + getAccessType(): ReservationAccess
        + setAccessType(ReservationAccess): void
        + getAccessCode(): String
        + setAccessCode(String): void
        + getPublicKey(): String
        + setPublicKey(String): void
        + getPrivateKey(): String
        + setPrivateKey(String): void
        + getParticipants(): List<Participant>
        + setParticipants(List<Participant>): void
        + addParticipant(Participant): void
    }
    
    class Participant {
        - id: Long
        - name: String
        - reservation: Reservation
        --
        + getId(): Long
        + getName(): String
        + setName(String): void
        + getReservation(): Reservation
        + setReservation(Reservation): void
    }
    
    enum ReservationAccess {
        PUBLIC
        PRIVATE
    }
    
    Reservation "1" *-- "many" Participant : contains
    Reservation --> ReservationAccess : uses
}

package "com.example.reservations.repository" {
    interface ReservationRepository {
        + findByPublicKey(String): Optional<Reservation>
        + findByPrivateKey(String): Optional<Reservation>
        + existsByRoomNumberAndStartTimeLessThanAndEndTimeGreaterThan(Integer, LocalDateTime, LocalDateTime): boolean
        + existsByStartTimeLessThanAndEndTimeGreaterThan(LocalDateTime, LocalDateTime): boolean
        + findByAccessType(ReservationAccess): List<Reservation>
    }
    
    ReservationRepository ..> Reservation : manages
}

package "com.example.reservations.service" {
    class ReservationService {
        - reservationRepository: ReservationRepository
        - secureRandom: SecureRandom {static}
        --
        + findAll(): List<Reservation>
        + findById(Long): Optional<Reservation>
        + findByAccessType(ReservationAccess): List<Reservation>
        + createReservation(Reservation): Reservation
        + updateReservation(Long, String, Reservation): Reservation
        + deleteReservation(Long, String): void
        + findByPublicKey(String): Optional<Reservation>
        + findByPrivateKey(String): Optional<Reservation>
        - generateKeys(Reservation): void
        - generateSecureKey(): String
        - validateReservation(Reservation): void
    }
    
    ReservationService --> ReservationRepository : uses
    ReservationService ..> Reservation : creates/updates
}

package "com.example.reservations.web" {
    class ReservationController {
        - reservationService: ReservationService
        --
        + index(Model): String
        + accessByKey(String, Model): String
        + newReservation(Model): String
        + createReservation(ReservationForm, BindingResult): String
        + editReservation(Long, String, Model): String
        + updateReservation(Long, String, ReservationForm, BindingResult, Model): String
        + deleteReservation(Long, String, Model): String
        + confirmation(Long, Model): String
        + publicView(Long, Model): String
        + privateView(Long, String, Boolean, String, Model): String
        + accessTypes(): ReservationAccess[]
    }
    
    ReservationController --> ReservationService : uses
    ReservationController ..> ReservationForm : uses
}

package "com.example.reservations.web.dto" {
    class ReservationForm {
        - title: String
        - location: String
        - roomNumber: Integer
        - description: String
        - startTime: LocalDateTime
        - endTime: LocalDateTime
        - accessType: ReservationAccess
        - accessCode: String
        - participantsText: String
        --
        + toReservation(): Reservation
        + {static} fromReservation(Reservation): ReservationForm
        + getters/setters...
    }
    
    ReservationForm ..> Reservation : converts to/from
}

@enduml
